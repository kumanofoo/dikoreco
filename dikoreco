#!/bin/bash
#
function show_channel() {
  cat <<EOD

CHANNEL:
  TBS       TBS Radio
  QRR       Bunka Hoso
  LFR       Nippon Hoso
  RN1       Radio NIKKEI 1
  RN2       Radio NIKKEI 2
  INT       InterFM897
  FMT       TOKYO FM
  FMJ       J-WAVE
  JORF      Radio Nippon
  BAYFM78   bayfm78
  NACK5     NACK5
  YFM       FM Yokohama
EOD
}

OUTFILEBASEPATH=.
#OUTFILEBASEPATH=${HOME}/radio
LOGFILE=${HOME}/.dikoreco.log
M4ATAG=$(cd $(dirname $0); pwd)/m4atag

#
# log
#
readonly PROCNAME=${0##*/}
function log() {
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%dT%H:%M:%S') ${PROCNAME} (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $@" >> ${LOGFILE}
}

log "start"

#
# check parameters
#
if [ $# -eq 3 ]; then
  OUTFILEPREFIX=$1
  RECTIMEMIN=$2
  CHANNEL=$3
else
  echo "usage : ${0##*/} OUTFILEPREFIX RECTIMEMIN CHANNEL"
  show_channel
  log "usage : $0 OUTFILEPREFIX RECTIMEMIN CHANNEL"
  exit 1
fi

OUTFILEPREFIX=$1
RECTIMEMIN=$2
CHANNEL=$3

log "prefix:${OUTFILEPREFIX} rectime:${RECTIMEMIN} channel:${CHANNEL}"

RTMPDUMP=/usr/bin/rtmpdump
FFMPEG=/usr/bin/ffmpeg
SWFEXTRACT=/usr/bin/swfextract
WGET=/usr/bin/wget

OUTFILENAME=${OUTFILEBASEPATH}/${OUTFILEPREFIX}_`date +%Y-%m-%d`
FLVFILEEXT=".flv"
#AACFILEEXT=".aac"
M4AFILEEXT=".m4a"

MARGINTIMEMIN=1
RECTIME=`expr ${RECTIMEMIN} \* 60 + ${MARGINTIMEMIN} \* 2 \* 60`
if [ "x${RECTIME}" = "x" ]; then
  log "failed recording time"
  exit 1
fi

#cd ${OUTFILEBASEPATH}

playerurl=http://radiko.jp/apps/js/flash/myplayer-release.swf
playerfile=${OUTFILEBASEPATH}/player.swf
keyfile=${OUTFILEBASEPATH}/authkey.png
filelist=${OUTFILEBASEPATH}/list.txt
auth1_fms=${OUTFILEBASEPATH}/auth1_fms_${OUTFILEPREFIX}_${CHANNEL}
auth2_fms=${OUTFILEBASEPATH}/auth2_fms_${OUTFILEPREFIX}_${CHANNEL}
channel_xml=${OUTFILEBASEPATH}/${CHANNEL}.xml

#
# get player
#
if [ ! -f $playerfile ]; then
  ${WGET} -q -O $playerfile $playerurl

  if [ $? -ne 0 ]; then
    log "failed get player"
    exit 1
  fi
fi

#
# get keydata (need swftools)
#
if [ ! -f $keyfile ]; then
  ${SWFEXTRACT} -b 12 $playerfile -o $keyfile

  if [ ! -f $keyfile ]; then
    log "failed get keydata"
    exit 1
  fi
fi

if [ -f ${auth1_fms} ]; then
  rm -f ${auth1_fms}
fi

#
# access auth1_fms
#
${WGET} -q \
     --header="pragma: no-cache" \
     --header="X-Radiko-App: pc_ts" \
     --header="X-Radiko-App-Version: 4.0.0" \
     --header="X-Radiko-User: test-stream" \
     --header="X-Radiko-Device: pc" \
     --post-data='\r\n' \
     --no-check-certificate \
     --save-headers \
     --tries=5 \
     --timeout=5 \
     -O ${auth1_fms} \
     https://radiko.jp/v2/api/auth1_fms

if [ $? -ne 0 ]; then
  log "failed auth1 process"
  exit 1
fi

#
# get partial key
#
authtoken=`cat ${auth1_fms} | perl -ne 'print $1 if(/x-radiko-authtoken: ([\w-]+)/i)'`
offset=`cat ${auth1_fms} | perl -ne 'print $1 if(/x-radiko-keyoffset: (\d+)/i)'`
length=`cat ${auth1_fms} | perl -ne 'print $1 if(/x-radiko-keylength: (\d+)/i)'`

partialkey=`dd if=$keyfile bs=1 skip=${offset} count=${length} 2> /dev/null | base64`

#echo -e "authtoken: ${authtoken} \noffset: ${offset} length: ${length} \npartialkey: $partialkey"

rm -f ${auth1_fms}

if [ -f ${auth2_fms} ]; then
  rm -f ${auth2_fms}
fi

#
# access auth2_fms
#
${WGET} -q \
     --header="pragma: no-cache" \
     --header="X-Radiko-App: pc_ts" \
     --header="X-Radiko-App-Version: 4.0.0" \
     --header="X-Radiko-User: test-stream" \
     --header="X-Radiko-Device: pc" \
     --header="X-Radiko-Authtoken: ${authtoken}" \
     --header="X-Radiko-Partialkey: ${partialkey}" \
     --post-data='\r\n' \
     --no-check-certificate \
     --tries=5 \
     --timeout=5 \
     -O ${auth2_fms} \
     https://radiko.jp/v2/api/auth2_fms

if [ $? -ne 0 -o ! -f ${auth2_fms} ]; then
  log "failed auth2 process"
  exit 1
fi

#echo "authentication success"

areaid=`cat ${auth2_fms} | perl -ne 'print $1 if(/^([^,]+),/i)'`
#echo "areaid: $areaid"

rm -f ${auth2_fms}

#
# get stream-url
#

if [ -f ${channel_xml} ]; then
  rm -f ${channel_xml}
fi

${WGET} -q "http://radiko.jp/v2/station/stream/${CHANNEL}.xml" -O ${channel_xml}

stream_url=`echo "cat /url/item[1]/text()" | xmllint --shell ${channel_xml} | tail -2 | head -1`
declare -a url_parts=(`echo ${stream_url} | perl -pe 's!^(.*)://(.*?)/(.*)/(.*?)$/!$1://$2 $3 $4!'`)

rm -f ${channel_xml}

#
# rtmpdump
#
#url_parts0: rtmpe://f-radiko.smartstream.ne.jp
#url_parts1: TBS/_definst_
#url_parts2: simul-stream.stream
RETRYCOUNT=0
while :
do
#  ${RTMPDUMP} -v \
  ${RTMPDUMP} -q \
              -r ${url_parts[0]} \
              --playpath ${url_parts[2]} \
              --app ${url_parts[1]} \
              -W $playerurl \
              -C S:"" -C S:"" -C S:"" -C S:$authtoken \
              --live \
              --flv ${OUTFILENAME}${FLVFILEEXT} \
              --stop ${RECTIME}
  if [ $? -ne 1 -o `wc -c ${OUTFILENAME}${FLVFILEEXT} | awk '{print $1}'` -ge 10240 ]; then
    break
  elif [ ${RETRYCOUNT} -ge 5 ]; then
    log "failed rtmpdump"
    exit 1
  else
    RETRYCOUNT=`expr ${RETRYCOUNT} + 1`
  fi
done

#${FFMPEG} -loglevel quiet -y -i "${OUTFILENAME}${FLVFILEEXT}" -vn -acodec copy "${OUTFILENAME}${AACFILEEXT}"
${FFMPEG} -loglevel quiet -y -i "${OUTFILENAME}${FLVFILEEXT}" -vn -acodec copy "${OUTFILENAME}${M4AFILEEXT}"

if [ -f ${OUTFILENAME}${M4AFILEEXT} ]; then
  rm -f ${OUTFILENAME}${FLVFILEEXT}
  (cd ${OUTFILEBASEPATH} && ${M4ATAG} ${OUTFILENAME}${M4AFILEEXT})
fi


(cd ${OUTFILEBASEPATH} && ls *.m4a > ${filelist})

log "finish ${OUTFILENAME}${M4AFILEEXT}"
