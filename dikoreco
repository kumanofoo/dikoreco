#!/bin/bash

function show_channel() {
  cat <<EOD

CHANNEL:
  TBS       TBS Radio
  QRR       Bunka Hoso
  LFR       Nippon Hoso
  RN1       Radio NIKKEI 1
  RN2       Radio NIKKEI 2
  INT       InterFM897
  FMT       TOKYO FM
  FMJ       J-WAVE
  JORF      Radio Nippon
  BAYFM78   bayfm78
  NACK5     NACK5
  YFM       FM Yokohama
EOD
}

pid=$$
date=`date +%Y-%m-%d`

OUTFILEBASEPATH=.
#OUTFILEBASEPATH=${HOME}/radio
LOGFILE=${HOME}/.dikoreco.log
M4ATAG=$(cd $(dirname $0); pwd)/m4atag

####
# Define authorize key value (from http://radiko.jp/apps/js/playerCommon.js)
RADIKO_AUTHKEY_VALUE="bcd151073c03b352e1ef2fd66c32209da9ca0afa"

#
# log
#
readonly PROCNAME=${0##*/}
function log() {
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%dT%H:%M:%S') ${PROCNAME} (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $@" >> ${LOGFILE}
}

log "start"

#
# check parameters
#
if [ $# -eq 3 ]; then
  OUTFILEPREFIX=$1
  RECTIMEMIN=$2
  CHANNEL=$3
else
  echo "usage : ${0##*/} OUTFILEPREFIX RECTIMEMIN CHANNEL"
  show_channel
  log "usage : $0 OUTFILEPREFIX RECTIMEMIN CHANNEL"
  exit 1
fi

OUTFILEPREFIX=$1
RECTIMEMIN=$2
CHANNEL=$3

log "prefix:${OUTFILEPREFIX} rectime:${RECTIMEMIN} channel:${CHANNEL}"

FFMPEG=/usr/bin/ffmpeg
CURL=/usr/bin/curl

OUTFILENAME=${OUTFILEBASEPATH}/${OUTFILEPREFIX}_${date}
M4AFILEEXT=".m4a"

MARGINTIMEMIN=1
RECTIME=`expr ${RECTIMEMIN} \* 60 + ${MARGINTIMEMIN} \* 2 \* 60`
if [ "x${RECTIME}" = "x" ]; then
  log "failed recording time"
  exit 1
fi

filelist=${OUTFILEBASEPATH}/list.txt
auth1_fms=${OUTFILEBASEPATH}/auth1_fms_${pid}
auth2_fms=${OUTFILEBASEPATH}/auth2_fms_${pid}
channel_xml=${OUTFILEBASEPATH}/${CHANNEL}.xml

if [ -f ${auth1_fms} ]; then
  rm -f ${auth1_fms}
fi

#
# access auth1_fms
#
${CURL} -s \
        --header "pragma: no-cache" \
        --header "X-Radiko-App: pc_html5" \
        --header "X-Radiko-App-Version: 0.0.1" \
        --header "X-Radiko-User: test-stream" \
        --header "X-Radiko-Device: pc" \
        --dump-header ${auth1_fms} \
        -o /dev/null \
        https://radiko.jp/v2/api/auth1

if [ $? -ne 0 ]; then
  log "failed auth1 process"
  exit 1
fi

if [ ! -f ${auth1_fms} ]; then
  log "failed get auth1_fms"
  exit 1
fi

#
# get partial key
#
authtoken=`cat ${auth1_fms} | perl -ne 'print $1 if(/x-radiko-authtoken: ([\w-]+)/i)'`
offset=`cat ${auth1_fms} | perl -ne 'print $1 if(/x-radiko-keyoffset: (\d+)/i)'`
length=`cat ${auth1_fms} | perl -ne 'print $1 if(/x-radiko-keylength: (\d+)/i)'`

partialkey=`echo "${RADIKO_AUTHKEY_VALUE}" | dd bs=1 "skip=${offset}" "count=${length}" 2> /dev/null | base64`

#echo -e "authtoken: ${authtoken} \noffset: ${offset} length: ${length} \npartialkey: $partialkey"

rm -f ${auth1_fms}

if [ -f ${auth2_fms} ]; then  
  rm -f ${auth2_fms}
fi

#
# access auth2_fms
#
${CURL} -s \
        --header "pragma: no-cache" \
        --header "X-Radiko-User: test-stream" \
        --header "X-Radiko-Device: pc" \
        --header "X-Radiko-AuthToken: ${authtoken}" \
        --header "X-Radiko-PartialKey: ${partialkey}" \
        -o ${auth2_fms} \
        https://radiko.jp/v2/api/auth2

if [ $? -ne 0 -o ! -f ${auth2_fms} ]; then
  log "failed auth2 process"
  exit 1
fi

#echo "authentication success"

# ISO 3166-2:JP (Codes of Prefectures)
areaid=`cat ${auth2_fms} | perl -ne 'print $1 if(/^([^,]+),/i)'`
log "areaid: $areaid"

rm -f ${auth2_fms}

#
# get stream-url
#
if [ -f ${channel_xml} ]; then
  rm -f ${channel_xml}
fi

${CURL} -s "http://radiko.jp/v2/station/stream_smh_multi/${CHANNEL}.xml" -o ${channel_xml}
res=`head -1 ${channel_xml} | grep -c "<?xml version"`
if [ ${res} -ne 1 ]; then
  log "unknown channel"
  rm -f ${channel_xml}
  exit 1
fi

stream_url=`xmllint --xpath "/urls/url[@areafree='0'][1]/playlist_create_url/text()" ${channel_xml}`

rm -f ${channel_xml}

#
# record radio
#
RETRYCOUNT=0
while :
do
  ${FFMPEG} \
      -loglevel error \
      -fflags +discardcorrupt \
      -headers "X-Radiko-Authtoken: ${authtoken}" \
      -i "${stream_url}" \
      -acodec copy \
      -vn \
      -bsf:a aac_adtstoasc \
      -y \
      -t ${RECTIME} \
      "${OUTFILENAME}${M4AFILEEXT}"
  if [ $? -ne 1 ]; then
    break
  elif [ ${RETRYCOUNT} -ge 5 ]; then
    log "failed to record"
    exit 1
  else
    RETRYCOUNT=`expr ${RETRYCOUNT} + 1`
  fi
done

if [ -f ${OUTFILENAME}${M4AFILEEXT} ]; then
  # add m4a tag
  (cd ${OUTFILEBASEPATH} && ${M4ATAG} ${OUTFILENAME}${M4AFILEEXT})
fi

#
# update file list
#
(cd ${OUTFILEBASEPATH} && ls *.m4a > ${filelist})

log "finish ${OUTFILENAME}${M4AFILEEXT}"

