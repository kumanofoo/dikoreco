#!/bin/bash

function show_channel() {
  cat <<EOD

CHANNEL:
  TBS       TBS Radio
  QRR       Bunka Hoso
  LFR       Nippon Hoso
  RN1       Radio NIKKEI 1
  RN2       Radio NIKKEI 2
  INT       InterFM897
  FMT       TOKYO FM
  FMJ       J-WAVE
  JORF      Radio Nippon
  BAYFM78   bayfm78
  NACK5     NACK5
  YFM       FM Yokohama
EOD
}

function webhook {
    #DIKORECO_SLACK_WEBHOOK_URL=https://hooks.slack.com/services/XXXXXXXXXXXXXXXXXXXXXXXXXXXX
    #DIKORECO_DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/XXXXXXXXXXXXXXXXXXXXXXXXXXXX

    content="$(cat)"
    if [ -n "$DIKORECO_DISCORD_WEBHOOK_URL" ]; then
        #content="{\"content\": \"$(cat)\"}"
        content=$(jq -n --arg content "$content" '{"content": $content}')
        curl -X POST -H 'Content-type: application/json' -d "$content" "$DIKORECO_DISCORD_WEBHOOK_URL"
    fi
    if [ -n "$DIKORECO_SLACK_WEBHOOK_URL" ]; then
        #content="{\"text\": \"$(cat)\"}"
        content=$(jq -n --arg content "$content" '{"text": $content}')
        curl -X POST -H 'Content-type: application/json' -d "$content" "$DIKORECO_SLACK_WEBHOOK_URL"
    fi
}

pid=$$
date=`date +%Y-%m-%d`

WORKDIR=.
#WORKDIR=${HOME}/radio
LOGFILE=${HOME}/.dikoreco.log
M4ATAG=$(cd $(dirname $0); pwd)/m4atag

####
# Define authorize key value (from http://radiko.jp/apps/js/playerCommon.js)
RADIKO_AUTHKEY_VALUE="bcd151073c03b352e1ef2fd66c32209da9ca0afa"

#
# log
#
readonly PROCNAME=${0##*/}
function log() {
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%dT%H:%M:%S') ${PROCNAME} (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $1" >> ${LOGFILE}
}

#
# check parameters
#
if [ $# -eq 3 ]; then
  OUTFILEPREFIX=$1
  RECTIMEMIN=$2
  CHANNEL=$3
else
  echo "usage : ${0##*/} OUTFILEPREFIX RECTIMEMIN CHANNEL"
  show_channel
  exit 1
fi

OUTFILEPREFIX=$1
RECTIMEMIN=$2
CHANNEL=$3

FFMPEG=/usr/bin/ffmpeg
CURL=/usr/bin/curl

OUTFILENAME=${WORKDIR}/${OUTFILEPREFIX}_${date}
M4AFILEEXT=".m4a"

MARGINTIMEMIN=1
RECTIME=`expr ${RECTIMEMIN} \* 60 + ${MARGINTIMEMIN} \* 2 \* 60 2> /dev/null`
if [ "x${RECTIME}" = "x" ]; then
  log "Failed to calculate the recording time."
  exit 1
fi

log "[start] prefix:${OUTFILEPREFIX} rectime:${RECTIMEMIN} channel:${CHANNEL}"

auth1_fms=${WORKDIR}/auth1_fms_${pid}
auth2_fms=${WORKDIR}/auth2_fms_${pid}
channel_xml=${WORKDIR}/${CHANNEL}.xml

if [ -f ${auth1_fms} ]; then
  rm -f ${auth1_fms}
fi

#
# access auth1_fms
#
${CURL} -s \
        --header "pragma: no-cache" \
        --header "X-Radiko-App: pc_html5" \
        --header "X-Radiko-App-Version: 0.0.1" \
        --header "X-Radiko-User: test-stream" \
        --header "X-Radiko-Device: pc" \
        --dump-header ${auth1_fms} \
        -o /dev/null \
        https://radiko.jp/v2/api/auth1

if [ $? -ne 0 -o ! -f ${auth1_fms} ]; then
  log "[error] failed to obtain auth1"
  exit 1
fi

#
# get partial key
#
authtoken=`cat ${auth1_fms} | perl -ne 'print $1 if(/x-radiko-authtoken: ([\w-]+)/i)'`
offset=`cat ${auth1_fms} | perl -ne 'print $1 if(/x-radiko-keyoffset: (\d+)/i)'`
length=`cat ${auth1_fms} | perl -ne 'print $1 if(/x-radiko-keylength: (\d+)/i)'`

partialkey=`echo "${RADIKO_AUTHKEY_VALUE}" | dd bs=1 "skip=${offset}" "count=${length}" 2> /dev/null | base64`

#echo -e "authtoken: ${authtoken} \noffset: ${offset} length: ${length} \npartialkey: $partialkey"

rm -f ${auth1_fms}

if [ -f ${auth2_fms} ]; then  
  rm -f ${auth2_fms}
fi

#
# access auth2_fms
#
${CURL} -s \
        --header "pragma: no-cache" \
        --header "X-Radiko-User: test-stream" \
        --header "X-Radiko-Device: pc" \
        --header "X-Radiko-AuthToken: ${authtoken}" \
        --header "X-Radiko-PartialKey: ${partialkey}" \
        -o ${auth2_fms} \
        https://radiko.jp/v2/api/auth2

if [ $? -ne 0 -o ! -f ${auth2_fms} ]; then
  log "[error] failed to obtain auth2."
  exit 1
fi

#echo "authentication success"

# ISO 3166-2:JP (Codes of Prefectures)
areaid=`cat ${auth2_fms} | perl -ne 'print $1 if(/^([^,]+),/i)'`
rm -f ${auth2_fms}

#
# get stream-url
#
if [ -f ${channel_xml} ]; then
  rm -f ${channel_xml}
fi

${CURL} -s "http://radiko.jp/v3/station/stream/pc_html5/${CHANNEL}.xml" -o ${channel_xml}
res=`head -1 ${channel_xml} | grep -c "<?xml version"`
if [ ${res} -ne 1 ]; then
  log "[error] unknown channel."
  rm -f ${channel_xml}
  exit 1
fi
base_url=`xmllint --xpath "/urls/url[@timefree='0' and @areafree='0'][2]/playlist_create_url/text()" ${channel_xml} 2> /dev/null`
rm -f ${channel_xml}
if [ -z ${base_url} ]; then
  log "[error] stream URL not found."
  exit 1
fi
stream_url="${base_url}?station_id=${CHANNEL}&l=15&type=c&lsid="

#
# record radio
#
RETRYCOUNT=0
while :
do
  err=$(${FFMPEG} \
      -loglevel error \
      -fflags +discardcorrupt \
      -headers "X-Radiko-Authtoken: ${authtoken}" \
      -i "${stream_url}" \
      -acodec copy \
      -vn \
      -bsf:a aac_adtstoasc \
      -y \
      -t ${RECTIME} \
      "${OUTFILENAME}${M4AFILEEXT}" 2>&1)
  case $? in
    0) break
       echo $?
       ;;
    1)
      if [ ${RETRYCOUNT} -ge 5 ]; then
        log "[error] failed to record after retrying."
        printf "dikoreco failed to record after 5 retries." | webhook
        exit 1
      else
        RETRYCOUNT=`expr ${RETRYCOUNT} + 1`
        log "[warn] retry to record(${RETRYCOUNT})."
      fi
      ;;
    *)
      if [ -n "${err}" ]; then
        message=$'[error] failed to record.\n'
        log "${message}$(echo "$err" | sed 's/^/  ffmpeg: /')"
      else
        log "[error] failed to record."
      fi
      printf "dikoreco failed to record." | webhook
      exit 1
      ;;
  esac
done

if [ -f ${OUTFILENAME}${M4AFILEEXT} ]; then
  # add m4a tag
  (cd ${WORKDIR} && ${M4ATAG} ${OUTFILENAME}${M4AFILEEXT})
fi

#
# move the m4a file to DIKORECO_OUTDIR and update file list
#
if [ -z ${DIKORECO_OUTDIR+x} ]; then
    DIKORECO_OUTDIR=${WORKDIR}
else
    mv ${OUTFILENAME}${M4AFILEEXT} ${DIKORECO_OUTDIR}
fi
(cd ${DIKORECO_OUTDIR} && ls *.m4a > list.txt)

log "[finish] ${OUTFILENAME}${M4AFILEEXT}"
printf "dikoreco recorded '$(basename ${OUTFILENAME})${M4AFILEEXT}'." | webhook
